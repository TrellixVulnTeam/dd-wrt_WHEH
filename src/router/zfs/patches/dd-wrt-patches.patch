Index: cmd/zed/agents/fmd_api.c
===================================================================
--- cmd/zed/agents/fmd_api.c	(revision 48748)
+++ cmd/zed/agents/fmd_api.c	(working copy)
@@ -36,7 +36,7 @@
 
 #include <sys/types.h>
 #include <sys/fm/protocol.h>
-#include <uuid/uuid.h>
+#include <uuid.h>
 #include <signal.h>
 #include <string.h>
 #include <time.h>
Index: cmd/zpool/os/linux/zpool_vdev_os.c
===================================================================
--- cmd/zpool/os/linux/zpool_vdev_os.c	(revision 48748)
+++ cmd/zpool/os/linux/zpool_vdev_os.c	(working copy)
@@ -82,8 +82,8 @@
 #include <sys/efi_partition.h>
 #include <sys/stat.h>
 #include <sys/mntent.h>
-#include <uuid/uuid.h>
-#include <blkid/blkid.h>
+#include <uuid.h>
+#include <blkid.h>
 
 typedef struct vdev_disk_db_entry
 {
Index: config/kernel-kuidgid.m4
===================================================================
--- config/kernel-kuidgid.m4	(revision 48748)
+++ config/kernel-kuidgid.m4	(working copy)
@@ -1,21 +1,28 @@
 dnl #
-dnl # 3.8 API change,
-dnl # User namespaces, use kuid_t in place of uid_t where available.
+dnl # User namespaces, use kuid_t in place of uid_t
+dnl # where available. Not strictly a user namespaces thing
+dnl # but it should prevent surprises
 dnl #
-AC_DEFUN([ZFS_AC_KERNEL_SRC_KUIDGID_T], [
-	ZFS_LINUX_TEST_SRC([kuidgid_t], [
+AC_DEFUN([ZFS_AC_KERNEL_KUIDGID_T], [
+	AC_MSG_CHECKING([whether kuid_t/kgid_t is available])
+	ZFS_LINUX_TRY_COMPILE([
 		#include <linux/uidgid.h>
 	], [
 		kuid_t userid __attribute__ ((unused)) = KUIDT_INIT(0);
 		kgid_t groupid __attribute__ ((unused)) = KGIDT_INIT(0);
-	])
-])
-
-AC_DEFUN([ZFS_AC_KERNEL_KUIDGID_T], [
-	AC_MSG_CHECKING([whether kuid_t/kgid_t is available])
-	ZFS_LINUX_TEST_RESULT([kuidgid_t], [
-		AC_MSG_RESULT(yes)
 	],[
-		ZFS_LINUX_TEST_ERROR([kuid_t/kgid_t])
+		ZFS_LINUX_TRY_COMPILE([
+			#include <linux/uidgid.h>
+		], [
+			kuid_t userid __attribute__ ((unused)) = 0;
+			kgid_t groupid __attribute__ ((unused)) = 0;
+		],[
+			AC_MSG_RESULT(yes; optional)
+		],[
+			AC_MSG_RESULT(yes; mandatory)
+			AC_DEFINE(HAVE_KUIDGID_T, 1, [kuid_t/kgid_t in use])
+		])
+	],[
+		AC_MSG_RESULT(no)
 	])
 ])
Index: config/kernel.m4
===================================================================
--- config/kernel.m4	(revision 48748)
+++ config/kernel.m4	(working copy)
@@ -115,7 +115,6 @@ AC_DEFUN([ZFS_AC_KERNEL_TEST_SRC], [
 	ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT
 	ZFS_AC_KERNEL_SRC_FPU
 	ZFS_AC_KERNEL_SRC_FMODE_T
-	ZFS_AC_KERNEL_SRC_KUIDGID_T
 	ZFS_AC_KERNEL_SRC_KUID_HELPERS
 	ZFS_AC_KERNEL_SRC_MODULE_PARAM_CALL_CONST
 	ZFS_AC_KERNEL_SRC_RENAME
Index: config/user-libblkid.m4
===================================================================
--- config/user-libblkid.m4	(revision 48748)
+++ config/user-libblkid.m4	(working copy)
@@ -3,7 +3,11 @@ dnl # Check for libblkid.  Basic support for detec
 dnl # has existing in blkid since 2008.
 dnl #
 AC_DEFUN([ZFS_AC_CONFIG_USER_LIBBLKID], [
-	ZFS_AC_FIND_SYSTEM_LIBRARY(LIBBLKID, [blkid], [blkid/blkid.h], [], [blkid], [], [], [
-		AC_MSG_FAILURE([
-		*** blkid.h missing, libblkid-devel package required])])
+	LIBBLKID=
+
+	AC_CHECK_HEADER([blkid.h], [], [AC_MSG_FAILURE([
+	*** blkid.h missing, libblkid-devel package required])])
+
+	AC_SUBST([LIBBLKID_LIBS], ["-lblkid"])
+	AC_DEFINE([HAVE_LIBBLKID], 1, [Define if you have libblkid])
 ])
Index: config/user-libuuid.m4
===================================================================
--- config/user-libuuid.m4	(revision 48748)
+++ config/user-libuuid.m4	(working copy)
@@ -2,7 +2,17 @@ dnl #
 dnl # Check for libuuid
 dnl #
 AC_DEFUN([ZFS_AC_CONFIG_USER_LIBUUID], [
-	ZFS_AC_FIND_SYSTEM_LIBRARY(LIBUUID, [uuid], [uuid/uuid.h], [], [uuid], [uuid_generate uuid_is_null], [], [
-	    AC_MSG_FAILURE([*** libuuid-devel package required])
-	])
+	LIBUUID=
+
+	AC_CHECK_HEADER([uuid.h], [], [AC_MSG_FAILURE([
+	*** uuid/uuid.h missing, libuuid-devel package required])])
+
+	AC_SEARCH_LIBS([uuid_generate], [uuid], [], [AC_MSG_FAILURE([
+	*** uuid_generate() missing, libuuid-devel package required])])
+
+	AC_SEARCH_LIBS([uuid_is_null], [uuid], [], [AC_MSG_FAILURE([
+	*** uuid_is_null() missing, libuuid-devel package required])])
+
+	AC_SUBST([LIBUUID], ["-luuid"])
+	AC_DEFINE([HAVE_LIBUUID], 1, [Define if you have libuuid])
 ])
Index: etc/systemd/system-generators/zfs-mount-generator.c
===================================================================
--- etc/systemd/system-generators/zfs-mount-generator.c	(revision 48748)
+++ etc/systemd/system-generators/zfs-mount-generator.c	(working copy)
@@ -193,6 +193,8 @@ fopenat(int dirfd, const char *pathname, int flags
 	return (fdopen(fd, stream_mode));
 }
 
+#define	my_strndupa(x,y)	strncpy(alloca(y),x,y)
+
 static int
 line_worker(char *line, const char *cachefile)
 {
@@ -226,7 +228,7 @@ line_worker(char *line, const char *cachefile)
 
 	const char *pool = dataset;
 	if ((toktmp = strchr(pool, '/')) != NULL)
-		pool = strndupa(pool, toktmp - pool);
+		pool = my_strndupa(pool, toktmp - pool);
 
 	if (p_nbmand == NULL) {
 		fprintf(stderr, PROGNAME "[%d]: %s: not enough tokens!\n",
Index: include/os/linux/spl/sys/cred.h
===================================================================
--- include/os/linux/spl/sys/cred.h	(revision 48748)
+++ include/os/linux/spl/sys/cred.h	(working copy)
@@ -39,6 +39,8 @@ typedef struct cred cred_t;
 #define	GROUP_AT(gi, i)	((gi)->gid[i])
 #endif
 
+#ifdef HAVE_KUIDGID_T
+
 #define	KUID_TO_SUID(x)		(__kuid_val(x))
 #define	KGID_TO_SGID(x)		(__kgid_val(x))
 #define	SUID_TO_KUID(x)		(KUIDT_INIT(x))
@@ -45,6 +47,16 @@ typedef struct cred cred_t;
 #define	SGID_TO_KGID(x)		(KGIDT_INIT(x))
 #define	KGIDP_TO_SGIDP(x)	(&(x)->val)
 
+#else /* HAVE_KUIDGID_T */
+
+#define	KUID_TO_SUID(x)		(x)
+#define	KGID_TO_SGID(x)		(x)
+#define	SUID_TO_KUID(x)		(x)
+#define	SGID_TO_KGID(x)		(x)
+#define	KGIDP_TO_SGIDP(x)	(x)
+
+#endif /* HAVE_KUIDGID_T */
+
 extern void crhold(cred_t *cr);
 extern void crfree(cred_t *cr);
 extern uid_t crgetuid(const cred_t *cr);
Index: include/os/linux/spl/sys/mutex.h
===================================================================
--- include/os/linux/spl/sys/mutex.h	(revision 48748)
+++ include/os/linux/spl/sys/mutex.h	(working copy)
@@ -27,6 +27,7 @@
 #include <sys/types.h>
 #include <linux/sched.h>
 #include <linux/mutex.h>
+#include <linux/sched.h>
 #include <linux/lockdep.h>
 #include <linux/compiler_compat.h>
 
Index: lib/libefi/rdwr_efi.c
===================================================================
--- lib/libefi/rdwr_efi.c	(revision 48748)
+++ lib/libefi/rdwr_efi.c	(working copy)
@@ -30,7 +30,7 @@
 #include <errno.h>
 #include <string.h>
 #include <unistd.h>
-#include <uuid/uuid.h>
+#include <uuid.h>
 #include <zlib.h>
 #include <libintl.h>
 #include <sys/types.h>
Index: lib/libshare/os/linux/nfs.c
===================================================================
--- lib/libshare/os/linux/nfs.c	(revision 48748)
+++ lib/libshare/os/linux/nfs.c	(working copy)
@@ -29,6 +29,7 @@
 #include <dirent.h>
 #include <stdio.h>
 #include <string.h>
+#include <fcntl.h>
 #include <errno.h>
 #include <fcntl.h>
 #include <sys/file.h>
Index: lib/libuutil/Makefile.am
===================================================================
--- lib/libuutil/Makefile.am	(revision 48748)
+++ lib/libuutil/Makefile.am	(working copy)
@@ -24,7 +24,7 @@ libuutil_la_LIBADD = \
 
 libuutil_la_LIBADD += $(LTLIBINTL)
 
-libuutil_la_LDFLAGS = -pthread
+libuutil_la_LDFLAGS = -pthread -latomic
 
 if !ASAN_ENABLED
 libuutil_la_LDFLAGS += -Wl,-z,defs
Index: lib/libzfs_core/Makefile.am
===================================================================
--- lib/libzfs_core/Makefile.am	(revision 48748)
+++ lib/libzfs_core/Makefile.am	(working copy)
@@ -37,7 +37,7 @@ libzfs_core_la_LIBADD = \
 
 libzfs_core_la_LIBADD += $(LTLIBINTL)
 
-libzfs_core_la_LDFLAGS = -pthread
+libzfs_core_la_LDFLAGS = -pthread -latomic
 
 if !ASAN_ENABLED
 libzfs_core_la_LDFLAGS += -Wl,-z,defs
Index: lib/libzpool/Makefile.am
===================================================================
--- lib/libzpool/Makefile.am	(revision 48748)
+++ lib/libzpool/Makefile.am	(working copy)
@@ -221,7 +221,7 @@ libzpool_la_LIBADD = \
 
 libzpool_la_LIBADD += $(LIBCLOCK_GETTIME) $(ZLIB_LIBS) -ldl -lm
 
-libzpool_la_LDFLAGS = -pthread
+libzpool_la_LDFLAGS = -pthread -latomic
 
 if !ASAN_ENABLED
 libzpool_la_LDFLAGS += -Wl,-z,defs
Index: lib/libzutil/os/linux/zutil_import_os.c
===================================================================
--- lib/libzutil/os/linux/zutil_import_os.c	(revision 48748)
+++ lib/libzutil/os/linux/zutil_import_os.c	(working copy)
@@ -73,7 +73,7 @@
 #include <libudev.h>
 #include <sched.h>
 #endif
-#include <blkid/blkid.h>
+#include <blkid.h>
 
 #define	DEV_BYID_PATH	"/dev/disk/by-id/"
 
@@ -587,7 +587,7 @@ zfs_device_get_physical(struct udev_device *dev, c
 int
 zpool_label_disk_wait(const char *path, int timeout_ms)
 {
-#ifdef HAVE_LIBUDEV
+#if 0 //def HAVE_LIBUDEV
 	struct udev *udev;
 	struct udev_device *dev = NULL;
 	char nodepath[MAXPATHLEN];
Index: module/Kbuild.in
===================================================================
--- module/Kbuild.in	(revision 48748)
+++ module/Kbuild.in	(working copy)
@@ -427,8 +427,10 @@ ZFS_OBJS_PPC_PPC64 := \
 zfs-objs            += $(addprefix zfs/,$(ZFS_OBJS)) $(addprefix os/linux/zfs/,$(ZFS_OBJS_OS))
 zfs-$(CONFIG_X86)   += $(addprefix zfs/,$(ZFS_OBJS_X86))
 zfs-$(CONFIG_ARM64) += $(addprefix zfs/,$(ZFS_OBJS_ARM64))
+ifeq ($(CONFIG_ALTIVEC),y)
 zfs-$(CONFIG_PPC)   += $(addprefix zfs/,$(ZFS_OBJS_PPC_PPC64))
 zfs-$(CONFIG_PPC64) += $(addprefix zfs/,$(ZFS_OBJS_PPC_PPC64))
+endif
 
 # Suppress incorrect warnings from versions of objtool which are not
 # aware of x86 EVEX prefix instructions used for AVX512.
