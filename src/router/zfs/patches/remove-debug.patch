Index: cmd/zdb/zdb.c
===================================================================
--- cmd/zdb/zdb.c	(revision 49350)
+++ cmd/zdb/zdb.c	(working copy)
@@ -8615,8 +8615,9 @@ main(int argc, char **argv)
 	/*
 	 * Disable reference tracking for better performance.
 	 */
+#ifdef ZFS_DEBUG
 	reference_tracking_enable = B_FALSE;
-
+#endif
 	/*
 	 * Do not fail spa_load when spa_load_verify fails. This is needed
 	 * to load non-idle pools.
Index: config/Rules.am
===================================================================
--- config/Rules.am	(revision 49350)
+++ config/Rules.am	(working copy)
@@ -80,4 +80,5 @@ KERNEL_CFLAGS       = $(FRAME_LARGER_THAN)
 LIBRARY_CFLAGS      = -no-suppress
 
 # Forcibly enable asserts/debugging for libzpool &al.
-FORCEDEBUG_CPPFLAGS = -DDEBUG -UNDEBUG -DZFS_DEBUG
+FORCEDEBUG_CPPFLAGS = 
+# -DDEBUG -UNDEBUG -DZFS_DEBUG
Index: include/os/linux/spl/sys/debug.h
===================================================================
--- include/os/linux/spl/sys/debug.h	(revision 49350)
+++ include/os/linux/spl/sys/debug.h	(working copy)
@@ -61,6 +61,38 @@ void spl_dumpstack(void);
 #define	PANIC(fmt, a...)						\
 	spl_panic(__FILE__, __FUNCTION__, __LINE__, fmt, ## a)
 
+#ifdef NDEBUG
+#define	VERIFY(cond) (void) ((!(cond)))
+
+#define	VERIFY3B(LEFT, OP, RIGHT)					\
+do {									\
+	const boolean_t __left = (boolean_t)(LEFT);			\
+	const boolean_t __right = (boolean_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3S(LEFT, OP, RIGHT)					\
+do {									\
+	const int64_t __left = (int64_t)(LEFT);				\
+	const int64_t __right = (int64_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3U(LEFT, OP, RIGHT)					\
+do {									\
+	const uint64_t __left = (uint64_t)(LEFT);			\
+	const uint64_t __right = (uint64_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3P(LEFT, OP, RIGHT)					\
+do {									\
+	const uintptr_t __left = (uintptr_t)(LEFT);			\
+	const uintptr_t __right = (uintptr_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY0(LEFT)							\
+do {									\
+	const uint64_t __left = (uint64_t)(LEFT);			\
+} while (0)
+#else
 #define	VERIFY(cond)							\
 	(void) (unlikely(!(cond)) &&					\
 	    spl_panic(__FILE__, __FUNCTION__, __LINE__,			\
@@ -119,7 +151,7 @@ void spl_dumpstack(void);
 		    "failed (0 == %lld)\n",				\
 		    (long long) (_verify3_right));			\
 	} while (0)
-
+#endif
 /*
  * Debugging disabled (--disable-debug)
  */
Index: lib/libspl/include/assert.h
===================================================================
--- lib/libspl/include/assert.h	(revision 49350)
+++ lib/libspl/include/assert.h	(working copy)
@@ -51,7 +51,39 @@ libspl_assert(const char *buf, const char *file, c
 #ifdef verify
 #undef verify
 #endif
+#ifdef NDEBUG
+#define	VERIFY(cond) (void) ((!(cond)))
+#define	verify(cond) (void) ((!(cond)))
 
+#define	VERIFY3B(LEFT, OP, RIGHT)					\
+do {									\
+	const boolean_t __left = (boolean_t)(LEFT);			\
+	const boolean_t __right = (boolean_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3S(LEFT, OP, RIGHT)					\
+do {									\
+	const int64_t __left = (int64_t)(LEFT);				\
+	const int64_t __right = (int64_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3U(LEFT, OP, RIGHT)					\
+do {									\
+	const uint64_t __left = (uint64_t)(LEFT);			\
+	const uint64_t __right = (uint64_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3P(LEFT, OP, RIGHT)					\
+do {									\
+	const uintptr_t __left = (uintptr_t)(LEFT);			\
+	const uintptr_t __right = (uintptr_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY0(LEFT)							\
+do {									\
+	const uint64_t __left = (uint64_t)(LEFT);			\
+} while (0)
+#else
 #define	VERIFY(cond)							\
 	(void) ((!(cond)) &&						\
 	    libspl_assert(#cond, __FILE__, __FUNCTION__, __LINE__))
@@ -107,7 +139,7 @@ do {									\
 		    "%s == 0 (0x%llx == 0)", #LEFT,			\
 		    (u_longlong_t)__left);				\
 } while (0)
-
+#endif
 #ifdef assert
 #undef assert
 #endif
