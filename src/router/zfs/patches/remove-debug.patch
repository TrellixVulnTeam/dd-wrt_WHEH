Index: cmd/zdb/zdb.c
===================================================================
--- cmd/zdb/zdb.c	(revision 49356)
+++ cmd/zdb/zdb.c	(working copy)
@@ -8615,8 +8615,9 @@ main(int argc, char **argv)
 	/*
 	 * Disable reference tracking for better performance.
 	 */
+#ifdef ZFS_DEBUG
 	reference_tracking_enable = B_FALSE;
-
+#endif
 	/*
 	 * Do not fail spa_load when spa_load_verify fails. This is needed
 	 * to load non-idle pools.
Index: config/Rules.am
===================================================================
--- config/Rules.am	(revision 49356)
+++ config/Rules.am	(working copy)
@@ -80,4 +80,5 @@ KERNEL_CFLAGS       = $(FRAME_LARGER_THAN)
 LIBRARY_CFLAGS      = -no-suppress
 
 # Forcibly enable asserts/debugging for libzpool &al.
-FORCEDEBUG_CPPFLAGS = -DDEBUG -UNDEBUG -DZFS_DEBUG
+FORCEDEBUG_CPPFLAGS = 
+# -DDEBUG -UNDEBUG -DZFS_DEBUG
Index: include/os/linux/spl/sys/debug.h
===================================================================
--- include/os/linux/spl/sys/debug.h	(revision 49356)
+++ include/os/linux/spl/sys/debug.h	(working copy)
@@ -59,11 +59,43 @@ int spl_panic(const char *file, const char *func,
 void spl_dumpstack(void);
 
 #define	PANIC(fmt, a...)						\
-	spl_panic(__FILE__, __FUNCTION__, __LINE__, fmt, ## a)
+	spl_panic("unknown", __FUNCTION__, __LINE__, fmt, ## a)
 
+#ifdef NDEBUG
+#define	VERIFY(cond) (void) ((!(cond)))
+
+#define	VERIFY3B(LEFT, OP, RIGHT)					\
+do {									\
+	const boolean_t __left __attribute__((unused)) = (boolean_t)(LEFT);			\
+	const boolean_t __right __attribute__((unused)) = (boolean_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3S(LEFT, OP, RIGHT)					\
+do {									\
+	const int64_t __left __attribute__((unused)) = (int64_t)(LEFT);				\
+	const int64_t __right __attribute__((unused)) = (int64_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3U(LEFT, OP, RIGHT)					\
+do {									\
+	const uint64_t __left __attribute__((unused)) = (uint64_t)(LEFT);			\
+	const uint64_t __right __attribute__((unused)) = (uint64_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3P(LEFT, OP, RIGHT)					\
+do {									\
+	const uintptr_t __left __attribute__((unused)) = (uintptr_t)(LEFT);			\
+	const uintptr_t __right __attribute__((unused)) = (uintptr_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY0(LEFT)							\
+do {									\
+	const uint64_t __left __attribute__((unused)) = (uint64_t)(LEFT);			\
+} while (0)
+#else
 #define	VERIFY(cond)							\
 	(void) (unlikely(!(cond)) &&					\
-	    spl_panic(__FILE__, __FUNCTION__, __LINE__,			\
+	    spl_panic("unknown", __FUNCTION__, __LINE__,			\
 	    "%s", "VERIFY(" #cond ") failed\n"))
 
 #define	VERIFY3B(LEFT, OP, RIGHT)	do {				\
@@ -70,7 +102,7 @@ void spl_dumpstack(void);
 		const boolean_t _verify3_left = (boolean_t)(LEFT);	\
 		const boolean_t _verify3_right = (boolean_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic("unknown", __FUNCTION__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%d " #OP " %d)\n",				\
 		    (boolean_t)(_verify3_left),				\
@@ -81,7 +113,7 @@ void spl_dumpstack(void);
 		const int64_t _verify3_left = (int64_t)(LEFT);		\
 		const int64_t _verify3_right = (int64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic("unknown", __FUNCTION__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%lld " #OP " %lld)\n",			\
 		    (long long)(_verify3_left),				\
@@ -92,7 +124,7 @@ void spl_dumpstack(void);
 		const uint64_t _verify3_left = (uint64_t)(LEFT);	\
 		const uint64_t _verify3_right = (uint64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic("unknown", __FUNCTION__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%llu " #OP " %llu)\n",			\
 		    (unsigned long long)(_verify3_left),		\
@@ -103,7 +135,7 @@ void spl_dumpstack(void);
 		const uintptr_t _verify3_left = (uintptr_t)(LEFT);	\
 		const uintptr_t _verify3_right = (uintptr_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic("unknown", __FUNCTION__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%px " #OP " %px)\n",			\
 		    (void *) (_verify3_left),				\
@@ -114,12 +146,12 @@ void spl_dumpstack(void);
 		const int64_t _verify3_left = (int64_t)(0);		\
 		const int64_t _verify3_right = (int64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left == _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic("unknown", __FUNCTION__, __LINE__,		\
 		    "VERIFY3(0 == " #RIGHT ") "				\
 		    "failed (0 == %lld)\n",				\
 		    (long long) (_verify3_right));			\
 	} while (0)
-
+#endif
 /*
  * Debugging disabled (--disable-debug)
  */
@@ -153,11 +185,11 @@ void spl_dumpstack(void);
 #define	ASSERT		VERIFY
 #define	IMPLY(A, B) \
 	((void)(likely((!(A)) || (B)) || \
-	    spl_panic(__FILE__, __FUNCTION__, __LINE__, \
+	    spl_panic("unknown", __FUNCTION__, __LINE__, \
 	    "(" #A ") implies (" #B ")")))
 #define	EQUIV(A, B) \
 	((void)(likely(!!(A) == !!(B)) || \
-	    spl_panic(__FILE__, __FUNCTION__, __LINE__, \
+	    spl_panic("unknown", __FUNCTION__, __LINE__, \
 	    "(" #A ") is equivalent to (" #B ")")))
 
 #endif /* NDEBUG */
Index: include/os/linux/spl/sys/sysmacros.h
===================================================================
--- include/os/linux/spl/sys/sysmacros.h	(revision 49355)
+++ include/os/linux/spl/sys/sysmacros.h	(working copy)
@@ -189,7 +189,7 @@ extern void spl_cleanup(void);
 	(((type)(x) ^ (type)(y)) < ((type)(x) & (type)(y)))
 
 #define	SET_ERROR(err) \
-	(__set_error(__FILE__, __func__, __LINE__, err), err)
+	(__set_error("unknown", __func__, __LINE__, err), err)
 
 #include <linux/sort.h>
 #define	qsort(base, num, size, cmp)		\
Index: include/sys/zfs_debug.h
===================================================================
--- include/sys/zfs_debug.h	(revision 49355)
+++ include/sys/zfs_debug.h	(working copy)
@@ -78,11 +78,11 @@ extern void __dprintf(boolean_t dprint, const char
  * use zfs_dbgmsg in high-frequency routines is the potential impact
  * that it can have on performance.
  */
+
+#ifdef ZFS_DEBUG
 #define	zfs_dbgmsg(...) \
 	if (zfs_dbgmsg_enable) \
 		__dprintf(B_FALSE, __FILE__, __func__, __LINE__, __VA_ARGS__)
-
-#ifdef ZFS_DEBUG
 /*
  * To enable this:
  *
@@ -92,6 +92,7 @@ extern void __dprintf(boolean_t dprint, const char
 	if (zfs_flags & ZFS_DEBUG_DPRINTF) \
 		__dprintf(B_TRUE, __FILE__, __func__, __LINE__, __VA_ARGS__)
 #else
+#define	zfs_dbgmsg(...) do { } while(0)
 #define	dprintf(...) ((void)0)
 #endif /* ZFS_DEBUG */
 
Index: lib/libspl/include/assert.h
===================================================================
--- lib/libspl/include/assert.h	(revision 49356)
+++ lib/libspl/include/assert.h	(working copy)
@@ -51,13 +51,45 @@ libspl_assert(const char *buf, const char *file, c
 #ifdef verify
 #undef verify
 #endif
+#ifdef NDEBUG
+#define	VERIFY(cond) (void) ((!(cond)))
+#define	verify(cond) (void) ((!(cond)))
 
+#define	VERIFY3B(LEFT, OP, RIGHT)					\
+do {									\
+	const boolean_t __left __attribute__((unused)) = (boolean_t)(LEFT);			\
+	const boolean_t __right __attribute__((unused)) = (boolean_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3S(LEFT, OP, RIGHT)					\
+do {									\
+	const int64_t __left __attribute__((unused)) = (int64_t)(LEFT);				\
+	const int64_t __right __attribute__((unused)) = (int64_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3U(LEFT, OP, RIGHT)					\
+do {									\
+	const uint64_t __left __attribute__((unused)) = (uint64_t)(LEFT);			\
+	const uint64_t __right __attribute__((unused)) = (uint64_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY3P(LEFT, OP, RIGHT)					\
+do {									\
+	const uintptr_t __left __attribute__((unused)) = (uintptr_t)(LEFT);			\
+	const uintptr_t __right __attribute__((unused)) = (uintptr_t)(RIGHT);			\
+} while (0)
+
+#define	VERIFY0(LEFT)							\
+do {									\
+	const uint64_t __left __attribute__((unused)) = (uint64_t)(LEFT);			\
+} while (0)
+#else
 #define	VERIFY(cond)							\
 	(void) ((!(cond)) &&						\
-	    libspl_assert(#cond, __FILE__, __FUNCTION__, __LINE__))
+	    libspl_assert(#cond, "unknown", __FUNCTION__, __LINE__))
 #define	verify(cond)							\
 	(void) ((!(cond)) &&						\
-	    libspl_assert(#cond, __FILE__, __FUNCTION__, __LINE__))
+	    libspl_assert(#cond, "unknown", __FUNCTION__, __LINE__))
 
 #define	VERIFY3B(LEFT, OP, RIGHT)					\
 do {									\
@@ -64,7 +96,7 @@ do {									\
 	const boolean_t __left = (boolean_t)(LEFT);			\
 	const boolean_t __right = (boolean_t)(RIGHT);			\
 	if (!(__left OP __right))					\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf("unknown", __FUNCTION__, __LINE__,	\
 		    "%s %s %s (0x%llx %s 0x%llx)", #LEFT, #OP, #RIGHT,	\
 		    (u_longlong_t)__left, #OP, (u_longlong_t)__right);	\
 } while (0)
@@ -74,7 +106,7 @@ do {									\
 	const int64_t __left = (int64_t)(LEFT);				\
 	const int64_t __right = (int64_t)(RIGHT);			\
 	if (!(__left OP __right))					\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf("unknown", __FUNCTION__, __LINE__,	\
 		    "%s %s %s (0x%llx %s 0x%llx)", #LEFT, #OP, #RIGHT,	\
 		    (u_longlong_t)__left, #OP, (u_longlong_t)__right);	\
 } while (0)
@@ -84,7 +116,7 @@ do {									\
 	const uint64_t __left = (uint64_t)(LEFT);			\
 	const uint64_t __right = (uint64_t)(RIGHT);			\
 	if (!(__left OP __right))					\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf("unknown", __FUNCTION__, __LINE__,	\
 		    "%s %s %s (0x%llx %s 0x%llx)", #LEFT, #OP, #RIGHT,	\
 		    (u_longlong_t)__left, #OP, (u_longlong_t)__right);	\
 } while (0)
@@ -94,7 +126,7 @@ do {									\
 	const uintptr_t __left = (uintptr_t)(LEFT);			\
 	const uintptr_t __right = (uintptr_t)(RIGHT);			\
 	if (!(__left OP __right))					\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf("unknown", __FUNCTION__, __LINE__,	\
 		    "%s %s %s (0x%llx %s 0x%llx)", #LEFT, #OP, #RIGHT,	\
 		    (u_longlong_t)__left, #OP, (u_longlong_t)__right);	\
 } while (0)
@@ -103,11 +135,11 @@ do {									\
 do {									\
 	const uint64_t __left = (uint64_t)(LEFT);			\
 	if (!(__left == 0))						\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf("unknown", __FUNCTION__, __LINE__,	\
 		    "%s == 0 (0x%llx == 0)", #LEFT,			\
 		    (u_longlong_t)__left);				\
 } while (0)
-
+#endif
 #ifdef assert
 #undef assert
 #endif
@@ -139,11 +171,11 @@ do {									\
 #define	IMPLY(A, B) \
 	((void)(((!(A)) || (B)) || \
 	    libspl_assert("(" #A ") implies (" #B ")", \
-	    __FILE__, __FUNCTION__, __LINE__)))
+	    "unknown", __FUNCTION__, __LINE__)))
 #define	EQUIV(A, B) \
 	((void)((!!(A) == !!(B)) || \
 	    libspl_assert("(" #A ") is equivalent to (" #B ")", \
-	    __FILE__, __FUNCTION__, __LINE__)))
+	    "unknown", __FUNCTION__, __LINE__)))
 
 #endif  /* NDEBUG */
 
Index: lib/libspl/include/sys/trace_spl.h
===================================================================
--- lib/libspl/include/sys/trace_spl.h	(revision 49355)
+++ lib/libspl/include/sys/trace_spl.h	(working copy)
@@ -18,7 +18,7 @@
  */
 #undef SET_ERROR
 #define	SET_ERROR(err) \
-	(__set_error(__FILE__, __func__, __LINE__, err), err)
+	(__set_error("unknown", __func__, __LINE__, err), err)
 
 
 #endif
Index: lib/libspl/include/sys/trace_zfs.h
===================================================================
--- lib/libspl/include/sys/trace_zfs.h	(revision 49355)
+++ lib/libspl/include/sys/trace_zfs.h	(working copy)
@@ -18,7 +18,7 @@
  */
 #undef SET_ERROR
 #define	SET_ERROR(err) \
-	(__set_error(__FILE__, __func__, __LINE__, err), err)
+	(__set_error("unknown", __func__, __LINE__, err), err)
 
 
 #endif
Index: module/zstd/lib/common/debug.h
===================================================================
--- module/zstd/lib/common/debug.h	(revision 49355)
+++ module/zstd/lib/common/debug.h	(working copy)
@@ -91,7 +91,7 @@ extern int g_debuglevel; /* the variable is only d
             }   }
 #  define DEBUGLOG(l, ...) {                                     \
                 if (l<=g_debuglevel) {                           \
-                    ZSTD_DEBUG_PRINT(__FILE__ ": " __VA_ARGS__); \
+                    ZSTD_DEBUG_PRINT("unknown" ": " __VA_ARGS__); \
                     ZSTD_DEBUG_PRINT(" \n");                     \
             }   }
 #else
Index: module/zstd/lib/common/error_private.h
===================================================================
--- module/zstd/lib/common/error_private.h	(revision 49355)
+++ module/zstd/lib/common/error_private.h	(working copy)
@@ -112,7 +112,7 @@ void _force_has_format_string(const char *format,
 #define RETURN_ERROR_IF(cond, err, ...) \
   if (cond) { \
     RAWLOG(3, "%s:%d: ERROR!: check %s failed, returning %s", \
-           __FILE__, __LINE__, ERR_QUOTE(cond), ERR_QUOTE(ERROR(err))); \
+           "unknown", __LINE__, ERR_QUOTE(cond), ERR_QUOTE(ERROR(err))); \
     _FORCE_HAS_FORMAT_STRING(__VA_ARGS__); \
     RAWLOG(3, ": " __VA_ARGS__); \
     RAWLOG(3, "\n"); \
@@ -127,7 +127,7 @@ void _force_has_format_string(const char *format,
 #define RETURN_ERROR(err, ...) \
   do { \
     RAWLOG(3, "%s:%d: ERROR!: unconditional check failed, returning %s", \
-           __FILE__, __LINE__, ERR_QUOTE(ERROR(err))); \
+           "unknown", __LINE__, ERR_QUOTE(ERROR(err))); \
     _FORCE_HAS_FORMAT_STRING(__VA_ARGS__); \
     RAWLOG(3, ": " __VA_ARGS__); \
     RAWLOG(3, "\n"); \
@@ -144,7 +144,7 @@ void _force_has_format_string(const char *format,
     size_t const err_code = (err); \
     if (ERR_isError(err_code)) { \
       RAWLOG(3, "%s:%d: ERROR!: forwarding error in %s: %s", \
-             __FILE__, __LINE__, ERR_QUOTE(err), ERR_getErrorName(err_code)); \
+             "unknown", __LINE__, ERR_QUOTE(err), ERR_getErrorName(err_code)); \
       _FORCE_HAS_FORMAT_STRING(__VA_ARGS__); \
       RAWLOG(3, ": " __VA_ARGS__); \
       RAWLOG(3, "\n"); \
